library(WGCNA)
install.packages('WGCNA')
library(WGCNA)
data <- read.delim('GSE152418_p20047_Study1_RawCounts.txt', header = T)
geo_id <- "GSE152418"
gse <- getGEO(geo_id, GSEMatrix = TRUE)
library(GEOquery)
install.packages('GEOquery')
gse <- getGEO(geo_id, GSEMatrix = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOquery")
library(WGCNA)
BiocManager::install("GEOquery")
BiocManager::install("WGCNA")
geo_id <- "GSE152418"
gse <- getGEO(geo_id, GSEMatrix = TRUE)
data <- read.delim('GSE152418_p20047_Study1_RawCounts.txt', header = T)
geo_id <- "GSE152418"
gse <- getGEO(geo_id, GSEMatrix = TRUE)
BiocManager::install("GEOquery")
geo_id <- "GSE152418"
gse <- getGEO(geo_id, GSEMatrix = TRUE)
BiocManager::install("get GEO")
library(WGCNA)
BiocManager::install("getGEO")
geo_id <- "GSE152418"
gse <- getGEO(geo_id, GSEMatrix = TRUE
geo_id <- "GSE152418"
data <- read.delim('GSE152418_p20047_Study1_RawCounts.txt', header = T)
geo_id <- "GSE152418"
gse <- getGEO(geo_id, GSEMatrix = TRUE)
library(WGCNA)
BiocManager::install("getGEO")
BiocManager::install("WGCNA")
library(WGCNA)
library(WGCNA)
library(DESeq2)
head(phenoData)
phenoData <- pData(phenoData(gse[[1]]))
library(WGCNA)
library(DESeq2)
library(dplyr)
library(tibble)
library(GEOquery)
library(ggplot2)
library(DESeq2)
library(tidyverse)
library(CorLevelPlot)
library(CorLevelPlot)
data <- read.delim('GSE152418_p20047_Study1_RawCounts.txt', header = T)
geo_id <- "GSE152418"
gse <- getGEO(geo_id, GSEMatrix = TRUE)
phenoData <- pData(phenoData(gse[[1]]))
head(phenoData)
data[1:10,1:10]
data_modified <- data %>%
gather(key = 'samples', value = 'counts', -ENSEMBLID) %>%
mutate(samples = gsub('\\.', '-', samples)) %>%
inner_join(., phenoData, by = c('samples' = 'title')) %>%
select(1,3,4) %>%
spread(key = 'geo_accession', value = 'counts') %>%
column_to_rownames(var = 'ENSEMBLID')
gsg <- goodSamplesGenes(t(data_modified))
summary(gsg)
gsg$allOK
table(gsg$goodGenes)
table(gsg$goodSamples)
data_modified <- data_modified[gsg$goodGenes == TRUE,]
pca <- prcomp(t(data_modified))
pca.dat <- pca$x
pca.var <- pca$sdev^2
pca.var.percent <- round(pca.var/sum(pca.var)*100, digits = 2)
pca.dat <- as.data.frame(pca.dat)
ggplot(pca.dat, aes(PC1, PC2)) +
geom_point() +
geom_text(label = rownames(pca.dat)) +
labs(x = paste0('PC1: ', pca.var.percent[1], ' %'),
y = paste0('PC2: ', pca.var.percent[2], ' %'))
htree <- hclust(dist(t(data)), method = "average")
samples.to.be.excluded <- c('GSM4615000', 'GSM4614993', 'GSM4614998', 'GSM4614997')
data_modified.subset <- data_modified[,!(colnames(data_modified) %in% samples.to.be.excluded)]
colData <- phenoData %>%
filter(!row.names(.) %in% samples.to.be.excluded)
names(colData)
names(colData) <- gsub(':ch1', '', names(colData))
names(colData) <- gsub('\\s', '_', names(colData))
all(rownames(colData) %in% colnames(data_modified.subset))
all(rownames(colData) == colnames(data_modified.subset))
dds <- DESeqDataSetFromMatrix(countData = data_modified.subset,
colData = colData,
design = ~ 1) # not spcifying model
dds75 <- dds[rowSums(counts(dds) >= 15) >= 24,]
nrow(dds75) # 13284 genes
dds_norm <- vst(dds75)
norm.counts <- assay(dds_norm) %>%
t()
power <- c(c(1:10), seq(from = 12, to = 50, by = 2))
sft <- pickSoftThreshold(norm.counts,
powerVector = power,
networkType = "signed",
verbose = 5)
sft.data <- sft$fitIndices
a1 <- ggplot(sft.data, aes(Power, SFT.R.sq, label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
geom_hline(yintercept = 0.8, color = 'red') +
labs(x = 'Power', y = 'Scale free topology model fit, signed R^2') +
theme_classic()
a2 <- ggplot(sft.data, aes(Power, mean.k., label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
labs(x = 'Power', y = 'Mean Connectivity') +
theme_classic()
grid.arrange(a1, a2, nrow = 2)
library(CorLevelPlot)
norm.counts[] <- sapply(norm.counts, as.numeric)
soft_power <- 18
cor <- WGCNA::cor
bwnet <- blockwiseModules(norm.counts,
maxBlockSize = 14000,
TOMType = "signed",
power = soft_power,
mergeCutHeight = 0.25,
numericLabels = FALSE,
randomSeed = 1234,
verbose = 3)
module_eigengenes <- bwnet$MEs
# Print out a preview
head(module_eigengenes)
# get number of genes for each module
table(bwnet$colors)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet$dendrograms[[1]], cbind(bwnet$unmergedColors, bwnet$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
head(module_eigengenes)
View(phenoData)
View(phenoData)
grid.arrange(a1, a2, nrow = 2)
norm.counts[] <- sapply(norm.counts, as.numeric)
head(module_eigengenes)
traits <- colData %>%
mutate(disease_state_bin = ifelse(grepl('COVID', disease_state), 1, 0)) %>%
select(8)
View(colData)
traits
colData$severity <- factor(colData$severity, levels = c("Healthy", "Convalescent", "ICU", "Moderate", "Severe"))
severity.out <- binarizeCategoricalColumns(colData$severity,
includePairwise = FALSE,
includeLevelVsAll = TRUE,
minCount = 1)
traits <- cbind(traits, severity.out)
traits
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
module_eigengenes <- bwnet$MEs
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
module.trait.corr.pvals <- corPvalueStudent(module.trait.corr, nSamples)
heatmap.data <- merge(module_eigengenes, traits, by = 'row.names')
View(heatmap.data)
head(module_eigengenes)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[18:22],
y = names(heatmap.data)[1:17],
col = c("blue1", "skyblue", "white", "pink", "red"))
install.packages("CorLevelPlot")
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[18:22],
y = names(heatmap.data)[1:17],
col = c("blue1", "skyblue", "white", "pink", "red"))
module.gene.mapping <- as.data.frame(bwnet$colors)
module.gene.mapping %>%
filter(`bwnet$colors` == 'turquoise') %>%
rownames()
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[18:22],
y = names(heatmap.data)[1:17],
col = c("blue1", "skyblue", "white", "pink", "red"))
library(CorLevelPlot)
install.packages("CorLevelPlot")
library(CorLevelPlot)
